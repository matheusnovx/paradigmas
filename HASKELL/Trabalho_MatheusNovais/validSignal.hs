{-
  ====
      Arquivo de teste para a função de validação final por sinais
  ====
-}

import Data.List
import Data.Maybe
import Solver

-- [esquerda, direita, cima, baixo]
-- -3 -> Sem sinal, -2 -> Sinal de maior que ">", -1 -> Sinal de menor que "<"

-- Exemplo Nr1
matrizEntrada4 :: [[[Int]]]
matrizEntrada4 =  [[[-3, -1, -3, -2],[-2, -3, -3, -1],[-3, -1, -3, -1],[-2, -3, -3, -2]],
                   [[-3, -1, -1, -3],[-2, -3, -2, -3],[-3, -2, -2, -3],[-1, -3, -1, -3]],
                   [[-3, -2, -3, -2],[-1, -3, -3, -1],[-3, -1, -3, -1],[-2, -3, -3, -2]],
                   [[-3, -2, -1, -3],[-1, -3, -2, -3],[-3, -2, -2, -3],[-1, -3, -1, -3]]]

-- Exemplo Nr15
matrizEntrada9 :: [[[Int]]]
matrizEntrada9 = [[[-3, -1, -3, -1], [-2, -1, -3, -2], [-2, -3, -3, -1], [-3, -1, -3, -2], [-2, -2, -3, -2], [-1, -3, -3, -2], [-3, -1, -3, -1], [-2, -2, -3, -1], [-1, -3, -3, -2]],
                  [[-3, -2, -2, -2], [-1, -1, -1, -1], [-2, -3, -2, -2], [-3, -1, -1, -1], [-2, -2, -1, -1], [-1, -3, -1, -1], [-3, -1, -2, -1], [-2, -2, -2, -1], [-1, -3, -1, -2]],
                  [[-3, -2, -1, -3], [-1, -2, -2, -3], [-1, -3, -1, -3], [-3, -1, -2, -3], [-2, -1, -2, -3], [-2, -3, -2, -3], [-3, -1, -2, -3], [-2, -2, -2, -3], [-1, -3, -1, -3]],
                  [[-3, -2, -3, -1], [-1, -1, -3, -1], [-2, -3, -3, -1], [-3, -2, -3, -2], [-1, -2, -3, -2], [-1, -3, -3, -2], [-3, -2, -3, -2], [-1, -1, -3, -1], [-2, -3, -3, -1]],
                  [[-3, -1, -2, -1], [-2, -2, -2, -2], [-1, -3, -2, -1], [-3, -2, -1, -2], [-1, -2, -1, -2], [-1, -3, -1, -2], [-3, -1, -1, -1], [-2, -1, -2, -2], [-2, -3, -2, -1]],
                  [[-3, -2, -2, -3], [-1, -2, -1, -3], [-1, -3, -2, -3], [-3, -2, -1, -3], [-1, -2, -1, -3], [-1, -3, -1, -3], [-3, -1, -2, -3], [-2, -1, -1, -3], [-2, -3, -2, -3]],
                  [[-3, -1, -3, -1], [-2, -2, -3, -2], [-1, -3, -3, -1], [-3, -2, -3, -2], [-1, -1, -3, -2], [-2, -3, -3, -2], [-3, -2, -3, -1], [-1, -1, -3, -1], [-2, -3, -3, -1]],
                  [[-3, -2, -2, -1], [-1, -1, -1, -1], [-2, -3, -2, -1], [-3, -2, -1, -1], [-1, -1, -1, -1], [-2, -3, -1, -2], [-3, -2, -2, -2], [-1, -2, -2, -2], [-1, -3, -2, -2]],
                  [[-3, -1, -2, -3], [-2, -1, -2, -3], [-2, -3, -2, -3], [-3, -2, -2, -3], [-1, -1, -2, -3], [-2, -3, -1, -3], [-3, -2, -1, -3], [-1, -1, -1, -3], [-2, -3, -1, -3]]]

matriz4                  :: Grid
matriz4                  =   ["2000",
                              "0000",
                              "0700",
                              "0000"]


matriz9                  :: Grid
matriz9                  =   ["200001038",
                              "000000005",
                              "070006000",
                              "000000013",
                              "098100257",
                              "310000800",
                              "900800020",
                              "050069784",
                              "400250000"]


validSignal :: Grid -> Bool
validSignal matriz = all testeSinal (linhas g) &&
                            all testeSinal (colunas g) &&
                            all testeSinal (caixa g)

testeSinal :: Eq a => [[a]] -> [[a]] -> Bool
testeSinal [] []= True
testeSinal (x : xs) (y : ys) 
  | x == '1' = -- Se o numero escolhido for 1 não pode ser -2 na lista
    True
  | x == '4' = -- Se o numero escolhido for 1 não pode ser -1 na lista
    True
  | otherwise =
    True -- De resto segue a regra comum 

main = do
  print(validSignal matriz4 matrizEntrada4)